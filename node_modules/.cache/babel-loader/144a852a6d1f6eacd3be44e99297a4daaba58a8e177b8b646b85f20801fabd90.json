{"ast":null,"code":"var _jsxFileName = \"/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\nimport NotFound from './404page';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  questions,\n  questionsIds,\n  authedUser\n}) => {\n  _s();\n  console.log(\"Dashboard props \", questionsIds);\n  const [showNewQuestions, setShowNewQuestions] = useState(true);\n  if (!questions) return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 26\n  }, this);\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n\n  const answeredQuestions = questionsIds.filter(id => {\n    const {\n      optionOne,\n      optionTwo\n    } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const unansweredQuestions = questionsIds.filter(id => !answeredQuestions.includes(id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center\",\n      onClick: () => setShowNewQuestions(!showNewQuestions),\n      children: showNewQuestions ? \"Show Done Questions\" : \"Show New Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), showNewQuestions ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Unanswered polls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: unansweredQuestions.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \" Answered polls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: answeredQuestions.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"biDwBbtNNT08ThIpK0WhXQkJqSA=\");\n_c = Dashboard;\nconst mapStateToProps = ({\n  questions,\n  authedUser\n}) => ({\n  questionsIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n  questions,\n  authedUser\n});\nexport default connect(mapStateToProps)(Dashboard);\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["connect","Question","NotFound","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","questions","questionsIds","authedUser","_s","console","log","showNewQuestions","setShowNewQuestions","fileName","_jsxFileName","lineNumber","columnNumber","answeredQuestions","filter","id","optionOne","optionTwo","votes","includes","unansweredQuestions","className","children","onClick","map","_c","mapStateToProps","Object","keys","sort","a","b","timestamp","$RefreshReg$"],"sources":["/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js"],"sourcesContent":["import { connect } from \"react-redux\";\nimport Question from \"./Question\";\nimport NotFound from './404page'\nimport { useState } from \"react\";\nconst Dashboard = ({ questions, questionsIds, authedUser }) => {\n  console.log(\"Dashboard props \", questionsIds)\n  const [showNewQuestions, setShowNewQuestions] = useState(true);\n  if (!questions) return <NotFound />;\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n  \n\n  const answeredQuestions = questionsIds.filter((id) => {\n    const { optionOne, optionTwo } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const unansweredQuestions = questionsIds.filter((id) => !answeredQuestions.includes(id));\n  \n \n  return (\n    <div className=\"card-grid\">\n      <button className=\"center\" onClick={() => setShowNewQuestions(!showNewQuestions)}>\n        {showNewQuestions ? \"Show Done Questions\" : \"Show New Questions\"}\n      </button>\n\n      {showNewQuestions ? (\n        <>\n          <h3 className=\"center\"><strong>Unanswered polls</strong></h3>\n          <ul className=\"dashboard-list\">\n            {unansweredQuestions.map((id) => (\n              <li key={id}>\n                <Question id={id} />\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <>\n          <h3 className=\"center\"><strong> Answered polls</strong></h3>\n          <ul className=\"dashboard-list\">\n            {answeredQuestions.map((id) => (\n              <li key={id}>\n                <Question id={id} />\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ questions, authedUser}) => ({\n\n    questionsIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    ),\n    questions,\n    authedUser,\n  \n  \n  });\nexport default connect(mapStateToProps)(Dashboard);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}