{"ast":null,"code":"var _jsxFileName = \"/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Question.js\",\n  _s = $RefreshSig$();\nimport { connect } from \"react-redux\";\nimport { formatDate, formatQuestion } from \"../utils/helper\";\nimport { useNavigate } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = props => {\n  _s();\n  const navigate = useNavigate();\n  if (props.questions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"This question doesn't exist.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 16\n    }, this);\n  }\n  const {\n    id,\n    name,\n    avatar,\n    timestamp\n  } = props.question;\n  const voteOptioneOne = props.questions[id].optionOne.votes.includes(props.authedUser);\n  const voteOptioneTwo = props.questions[id].optionTwo.votes.includes(props.authedUser);\n  const hasVoted = voteOptioneOne || voteOptioneTwo;\n  const toParent = (e, id) => {\n    e.preventDefault();\n    navigate(`/question/${id}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: hasVoted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: avatar,\n        alt: `Avar of ${name}`,\n        className: \"avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: formatDate(timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"show-bnt\",\n          onClick: e => toParent(e, id),\n          children: \"show\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_s(Questions, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Questions;\nconst mapStateToProps = ({\n  authedUser,\n  users,\n  questions\n}, {\n  id\n}) => {\n  const question = questions[id];\n  return {\n    id,\n    authedUser,\n    question: question ? formatQuestion(question, users[question.author], authedUser) : null\n  };\n};\nexport default connect(mapStateToProps)(Questions);\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["connect","formatDate","formatQuestion","useNavigate","jsxDEV","_jsxDEV","Questions","props","_s","navigate","questions","children","fileName","_jsxFileName","lineNumber","columnNumber","id","name","avatar","timestamp","question","voteOptioneOne","optionOne","votes","includes","authedUser","voteOptioneTwo","optionTwo","hasVoted","toParent","e","preventDefault","className","src","alt","onClick","_c","mapStateToProps","users","author","$RefreshReg$"],"sources":["/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Question.js"],"sourcesContent":["import { connect } from \"react-redux\"\nimport { formatDate, formatQuestion } from \"../utils/helper\"\nimport { useNavigate } from \"react-router\"\n\n\nconst Questions = (props) => {\n    const navigate = useNavigate();\n\n\n\n    if(props.questions === null) {\n        return <div>This question doesn't exist.</div>\n    }\n   \n    const {id, name, avatar, timestamp } = props.question\n    const voteOptioneOne = props.questions[id].optionOne.votes.includes(props.authedUser)\n    const voteOptioneTwo = props.questions[id].optionTwo.votes.includes(props.authedUser)\n    const hasVoted = voteOptioneOne || voteOptioneTwo;\n\n    const toParent = (e, id) => {\n        e.preventDefault();\n        navigate(`/question/${id}`);  \n    }\n    return (\n        <div>\n\n          {hasVoted && (  <div className=\"question\">\n            <img src={avatar} alt={`Avar of ${name}`} className=\"avatar\" />\n            <div className=\"question-info\">\n                <div>\n                    <span>{name}</span>\n                    <div>{formatDate(timestamp)}</div>\n                </div>\n                <button className=\"show-bnt\" onClick={ (e) => toParent(e,id) }>show</button>\n\n            </div>\n        </div>)}\n\n        </div>\n        \n\n       \n    )\n}\n\nconst mapStateToProps = ({authedUser, users, questions }, {id}) => {\n    const question = questions[id];\n\n    return{\n        id,\n        authedUser,\n        question: question \n        ? formatQuestion(question, users[question.author], authedUser) \n        : null\n    }\n\n}\n\nexport default connect(mapStateToProps)(Questions);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}