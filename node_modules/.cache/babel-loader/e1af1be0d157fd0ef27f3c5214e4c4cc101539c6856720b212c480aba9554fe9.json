{"ast":null,"code":"var _jsxFileName = \"/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  questions,\n  questionsIds,\n  authedUser\n}) => {\n  console.log(\"Dashboard props \", questionsIds);\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n  if (!questions[id]) return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 30\n  }, this);\n  const hasAnwerQuestion = questionsIds.filter(id => {\n    const {\n      optionOne,\n      optionTwo\n    } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const notAnswersQuestion = questionsIds.filter(id => !hasAnwerQuestion.includes(id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"center\",\n      children: \"New Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dashboard-list\",\n      children: notAnswersQuestion.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 19\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      style: {\n        border: \"1px dotted #8c8b8b\",\n        width: \"700px\",\n        color: 'blue',\n        fontSize: '20px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"center\",\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dashboard-list\",\n      children: questionsIds.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 19\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n};\n_c = Dashboard;\nconst mapStateToProps = ({\n  questions,\n  authedUser\n}) => ({\n  questionsIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n  questions,\n  authedUser\n});\nexport default connect(mapStateToProps)(Dashboard);\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["connect","Question","jsxDEV","_jsxDEV","Dashboard","questions","questionsIds","authedUser","console","log","id","NotFound","fileName","_jsxFileName","lineNumber","columnNumber","hasAnwerQuestion","filter","optionOne","optionTwo","votes","includes","notAnswersQuestion","className","children","map","style","border","width","color","fontSize","_c","mapStateToProps","Object","keys","sort","a","b","timestamp","$RefreshReg$"],"sources":["/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js"],"sourcesContent":["import { connect } from \"react-redux\";\nimport Question from \"./Question\";\n\nconst Dashboard = ({ questions, questionsIds, authedUser }) => {\n  console.log(\"Dashboard props \", questionsIds)\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n  if (!questions[id]) return <NotFound />;\n  \n  const hasAnwerQuestion = questionsIds.filter((id) => {\n    const { optionOne, optionTwo } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const notAnswersQuestion = questionsIds.filter((id) => !hasAnwerQuestion.includes(id));\n  \n \n    return (\n      <div className=\"card-grid\">\n        <h3 className=\"center\">New Questions</h3>\n        <ul className=\"dashboard-list\">\n            {notAnswersQuestion.map((id) =>(\n                <li key={id}>\n                  <Question id={id}/>\n                </li>\n            ))}\n        </ul>\n\n        <hr style={{ border:\"1px dotted #8c8b8b\", width: \"700px\", color: 'blue', fontSize: '20px' }}></hr>\n\n        <h3 className=\"center\">Done</h3>\n        <ul className=\"dashboard-list\">\n            {questionsIds.map((id) =>(\n                <li key={id}>\n                  <Question id={id}/>\n                </li>\n            ))}\n        </ul>\n      </div>\n    )\n}\n\nconst mapStateToProps = ({ questions, authedUser}) => ({\n\n    questionsIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    ),\n    questions,\n    authedUser,\n  \n  \n  });\nexport default connect(mapStateToProps)(Dashboard);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}