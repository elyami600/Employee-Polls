{"ast":null,"code":"var _jsxFileName = \"/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\nimport NotFound from './404page';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  questions,\n  questionsIds,\n  authedUser\n}) => {\n  console.log(\"Dashboard props \", questionsIds);\n  if (!questions) return /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 26\n  }, this);\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n\n  const answeredQuestions = questionsIds.filter(id => {\n    const {\n      optionOne,\n      optionTwo\n    } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const unansweredQuestions = questionsIds.filter(id => !answeredQuestions.includes(id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-grid\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowNewQuestions(!showNewQuestions),\n      children: showNewQuestions ? \"Show Done Questions\" : \"Show New Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), showNewQuestions ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"center\",\n        children: \"New Questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: unansweredQuestions.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 17\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"center\",\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"dashboard-list\",\n        children: answeredQuestions.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = Dashboard;\nconst mapStateToProps = ({\n  questions,\n  authedUser\n}) => ({\n  questionsIds: Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp),\n  questions,\n  authedUser\n});\nexport default connect(mapStateToProps)(Dashboard);\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["connect","Question","NotFound","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","questions","questionsIds","authedUser","console","log","fileName","_jsxFileName","lineNumber","columnNumber","answeredQuestions","filter","id","optionOne","optionTwo","votes","includes","unansweredQuestions","className","children","onClick","setShowNewQuestions","showNewQuestions","map","_c","mapStateToProps","Object","keys","sort","a","b","timestamp","$RefreshReg$"],"sources":["/Users/yamilperez/Documents/React-NanoDegree/Employee-Polls/src/components/Dashboard.js"],"sourcesContent":["import { connect } from \"react-redux\";\nimport Question from \"./Question\";\nimport NotFound from './404page'\nconst Dashboard = ({ questions, questionsIds, authedUser }) => {\n  console.log(\"Dashboard props \", questionsIds)\n  if (!questions) return <NotFound />;\n\n  // check if the id has answer the question\n  // return new array question ID that authedUser hasnt voted yet\n  \n\n  const answeredQuestions = questionsIds.filter((id) => {\n    const { optionOne, optionTwo } = questions[id];\n    return optionOne.votes.includes(authedUser) || optionTwo.votes.includes(authedUser);\n  });\n  const unansweredQuestions = questionsIds.filter((id) => !answeredQuestions.includes(id));\n  \n \n  return (\n    <div className=\"card-grid\">\n      <button onClick={() => setShowNewQuestions(!showNewQuestions)}>\n        {showNewQuestions ? \"Show Done Questions\" : \"Show New Questions\"}\n      </button>\n\n      {showNewQuestions ? (\n        <>\n          <h3 className=\"center\">New Questions</h3>\n          <ul className=\"dashboard-list\">\n            {unansweredQuestions.map((id) => (\n              <li key={id}>\n                <Question id={id} />\n              </li>\n            ))}\n          </ul>\n        </>\n      ) : (\n        <>\n          <h3 className=\"center\">Done</h3>\n          <ul className=\"dashboard-list\">\n            {answeredQuestions.map((id) => (\n              <li key={id}>\n                <Question id={id} />\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ questions, authedUser}) => ({\n\n    questionsIds: Object.keys(questions).sort(\n      (a, b) => questions[b].timestamp - questions[a].timestamp\n    ),\n    questions,\n    authedUser,\n  \n  \n  });\nexport default connect(mapStateToProps)(Dashboard);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}